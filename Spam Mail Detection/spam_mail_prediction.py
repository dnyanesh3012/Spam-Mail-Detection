# -*- coding: utf-8 -*-
"""Spam mail prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pCVV0VkMKwIMpSqYEQA-AhCetefKyDzA
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import hamming_loss

raw_mail_data = pd.read_csv('/content/mail_data.csv')

mail_data.head()

print(raw_mail_data)

raw_mail_data.shape

mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

raw_mail_data.head()

mail_data.shape

mail_data.loc[mail_data['Category'] == 'spam' , 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham' , 'Category',] = 1

#seperating the data as text and labels
x = mail_data['Message']

y = mail_data['Category']

print (x)

print (y)

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.2,random_state=3)

print(x.shape)
print(x_train.shape)
print(x_test.shape)

"""feature extraction

"""

print (y_test)

feature_extraction = TfidfVectorizer(min_df = 1,stop_words='english', lowercase=True)

x_train_features = feature_extraction.fit_transform(x_train)

x_test_features = feature_extraction.transform(x_test)
y_train = y_train.astype('int')
y_test = y_test.astype('int')

print (x_train)

print (x_train_features)

model = LogisticRegression()

model.fit (x_train_features , y_train)

prediction_on_training_data = model.predict(x_train_features)
accuracy_on_training_data = accuracy_score(y_train, prediction_on_training_data)

print('Accuracy on training data :' , accuracy_on_training_data)

hamming_loss_on_test_data = hamming_loss(y_test, prediction_on_test_data)

hamming_loss_on_test_data

prediction_on_test_data = model.predict(x_test_features)

accuracy_on_test_data = accuracy_score(y_test, prediction_on_test_data)

print(y_test.shape)
print(prediction_on_test_data.shape)

accuracy_ona_test_data = accuracy_score(y_test , prediction_on_test_data)

accuracy_ona_test_data

